trigger:
- master

pool:
  vmImage: 'vs2017-win2016'

variables:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version:
  au_push: true
  # Force test: use 1 to test all, or N to split testing into N groups
  au_test_groups: 1

  # Github token to commit pushed packages to repository
  github_user_repo: 'bdukes/Chocolatey-Packages'
  #github_api_key:

  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: fd3d636b9b4617772f9b99ceb88838fa

  # Force test: gist id for test results
  gist_id_test:

  # Chocolatey API key - to push updated packages
  #api_key:

steps:
- powershell: |
    git config --global user.email "bdukes@engagesoftware.com"
    git config --global user.name "Brian Dukes (via Azure DevOps)"
    git config --global core.safecrlf false
  displayName: 'Configure Git'

- powershell: |
    Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version
    $PSVersionTable
    git --version
    choco --version
  displayName: 'Output environment details'

- powershell: |
    git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
    . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version
  displayName: 'Install AU'

- powershell: |
    $ErrorActionPreference = 'Continue'
    if ($Env:BUILD_REASON -eq 'IndividualCI') {
        switch -regex ($Env:BUILD_SOURCEVERSIONMESSAGE)
        {
            '\[AU (.+?)\]' {
              Write-Host "##vso[task.setvariable variable=forced]$($Matches[1])"
            }
            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    pushd $package_dir
                      if (Test-Path update.ps1 -ea 0) { ./update.ps1 }
                      choco pack; Push-Package;
                    popd
                }
                return
            }
        }
    }
  displayName: 'Process commit message commands'

- task: PowerShell@2
  inputs:
    filePath: au/update_all.ps1
    arguments: '-ForcedPackages $env:FORCED'
  displayName: 'Update all packages'

- task: CopyFiles@2
  inputs:
    sourceFolder: 'Update-AUPackages.md'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy Update-AUPackages.md to Artifacts Staging Directory'

- task: CopyFiles@2
  inputs:
    sourceFolder: 'update_info.xml'
    targetFolder: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Copy update_info.xml to Artifacts Staging Directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
